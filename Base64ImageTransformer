package base64ImageTransformer;

import javax.swing.JOptionPane;

public class Base64ImageTransformer {
	public static void main(String[] args) {
		String bytes = "String....";
		String hexa = JOptionPane.showInputDialog("Informe o codigo hexadecimal");
		String result = hexStringToBase64(hexa);
		JOptionPane.showMessageDialog(null, result);
		System.out.println(hexStringToBase64(bytes));
	}
// criar uma forma de escrever em um documento
	private static String hexStringToBase64(String hexaString) {
		if (hexaString.startsWith("\\x")) {
			hexaString = hexaString.substring(2);
		}
		int tam = hexaString.length();
		byte[] bytesResult = new byte[tam / 2];
		for (int i = 0; i < tam; i += 2) {
			bytesResult[i / 2] = (byte) ((Character.digit(hexaString.charAt(i), 16) << 4)
					+ Character.digit(hexaString.charAt(i + 1), 16));
		}
		return "data:image/png;base64,".concat(encodeBase64(bytesResult));
	}

	private static final char[] CA = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".toCharArray();

	public final static String encodeBase64(byte[] sArr) {
		// Check special case
		int sLen = sArr != null ? sArr.length : 0;
		if (sLen == 0)
			return "";

		int eLen = (sLen / 3) * 3; // Length of even 24-bits.
		int cCnt = ((sLen - 1) / 3 + 1) << 2; // Returned character count
		int dLen = cCnt; // Length of returned array
		char[] dArr = new char[dLen];

		// Encode even 24-bits
		for (int s = 0, d = 0; s < eLen;) {
			// Copy next three bytes into lower 24 bits of int, paying attension
			// to sign.
			int i = (sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);

			// Encode the int into four chars
			dArr[d++] = CA[(i >>> 18) & 0x3f];
			dArr[d++] = CA[(i >>> 12) & 0x3f];
			dArr[d++] = CA[(i >>> 6) & 0x3f];
			dArr[d++] = CA[i & 0x3f];
		}

		// Pad and encode last bits if source isn't even 24 bits.
		int left = sLen - eLen; // 0 - 2.
		if (left > 0) {
			// Prepare the int
			int i = ((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);

			// Set last four chars
			dArr[dLen - 4] = CA[i >> 12];
			dArr[dLen - 3] = CA[(i >>> 6) & 0x3f];
			dArr[dLen - 2] = left == 2 ? CA[i & 0x3f] : '=';
			dArr[dLen - 1] = '=';
		}
		return new String(dArr);
	}
}
